<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModdingAPI</name>
    </assembly>
    <members>
        <member name="T:ModdingAPI.FileUtil">
            <summary>
            A class for handling file IO related operations
            </summary>
        </member>
        <member name="M:ModdingAPI.FileUtil.loadConfig``1">
            <summary>
            Loads the configuration file for this mod from the configs folder
            </summary>
            <typeparam name="T">The type of the config object</typeparam>
            <returns>The configuration object</returns>
        </member>
        <member name="M:ModdingAPI.FileUtil.saveConfig``1(``0)">
            <summary>
            Saves a configuration file for this mod to the configs folder
            </summary>
            <typeparam name="T">The type of the config object</typeparam>
            <param name="config">The configuration object</param>
        </member>
        <member name="M:ModdingAPI.FileUtil.loadDataText(System.String,System.String@)">
            <summary>
            Loads a string from a file in the data folder
            </summary>
            <param name="fileName">The name of the data file</param>
            <param name="output">The data string, or null if the file deosn't exist</param>
            <returns>Whether the data was loaded successfully or not</returns>
        </member>
        <member name="M:ModdingAPI.FileUtil.loadDataArray(System.String,System.String[]@)">
            <summary>
            Loads an array from a file in the data folder
            </summary>
            <param name="fileName">The name of the data file</param>
            <param name="output">The data array, or null if the file deosn't exist</param>
            <returns>Whether the data was loaded successfully or not</returns>
        </member>
        <member name="M:ModdingAPI.FileUtil.loadDataDictionary(System.String,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Loads a dictionary from a file in the data folder
            </summary>
            <param name="fileName">The name of the data file</param>
            <param name="output">The data dictionary, or null if the file deosn't exist</param>
            <returns>Whether the data was loaded successfully or not</returns>
        </member>
        <member name="M:ModdingAPI.FileUtil.loadDataImages(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,UnityEngine.Sprite[]@)">
            <summary>
            Loads an array of images from an image file in the data folder
            </summary>
            <param name="fileName">The name of the data file</param>
            <param name="spriteSize">The pixel size of each square sprite in the image</param>
            <param name="pixelsPerUnit">The pixels per unit of each square sprite in the image</param>
            <param name="border">The border size of each square sprite in the image</param>
            <param name="pointFilter">Whether a point filter should be applied to the image</param>
            <param name="output">The data images, or null if the file deosn't exist</param>
            <returns>Whether the data was loaded successfully or not</returns>
        </member>
        <member name="M:ModdingAPI.FileUtil.saveTextFile(System.String,System.String)">
            <summary>
            Writes text to a file in the root directory
            </summary>
            <param name="fileName">The name of text file to create</param>
            <param name="text">The text to write to the file</param>
        </member>
        <member name="M:ModdingAPI.FileUtil.jsonObject``1(System.String)">
            <summary>
            Converts a json string into a json object
            </summary>
            <typeparam name="T">The type of object to convert to</typeparam>
            <param name="json">The json string to convert into an object</param>
            <returns>The object created from the json string</returns>
        </member>
        <member name="M:ModdingAPI.FileUtil.jsonString``1(``0)">
            <summary>
            Converts an object into a json string
            </summary>
            <typeparam name="T">The type of object to convert from</typeparam>
            <param name="obj">The object to convert into a json string</param>
            <returns>The json string created from the object</returns>
        </member>
        <member name="T:ModdingAPI.Mod">
            <summary>
            An abstract representation of a mod
            </summary>
        </member>
        <member name="P:ModdingAPI.Mod.ModId">
            <summary>
            The unique id of this mod used for harmony patching
            </summary>
        </member>
        <member name="P:ModdingAPI.Mod.ModName">
            <summary>
            The name of the mod to be displayed on the main menu
            </summary>
        </member>
        <member name="P:ModdingAPI.Mod.ModVersion">
            <summary>
            The version of the mod
            </summary>
        </member>
        <member name="P:ModdingAPI.Mod.FileUtil">
            <summary>
            The file utility for performing various IO operations
            </summary>
        </member>
        <member name="P:ModdingAPI.Mod.DisableFileLogging">
            <summary>
            Set to true to disable the mod from writing to the log file
            </summary>
        </member>
        <member name="M:ModdingAPI.Mod.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates, registers, and patches a new mod
            </summary>
            <param name="modId">The unique id of this mod used for harmony patching</param>
            <param name="modName">The name of the mod to be displayed on the main menu</param>
            <param name="modVersion">The version of the mod</param>
        </member>
        <member name="M:ModdingAPI.Mod.Update">
            <summary>
            Called every frame by the modding API
            </summary>
        </member>
        <member name="M:ModdingAPI.Mod.LateUpdate">
            <summary>
            Called at the end of every frame by the modding API
            </summary>
        </member>
        <member name="M:ModdingAPI.Mod.Initialize">
            <summary>
            Called at the beginning of the game by the modding API
            </summary>
        </member>
        <member name="M:ModdingAPI.Mod.Dispose">
            <summary>
            Called at the end of the game by the modding API
            </summary>
        </member>
        <member name="M:ModdingAPI.Mod.LevelLoaded(System.String,System.String)">
            <summary>
            Called when a scene is loaded by the modding API
            </summary>
            <param name="oldLevel">The name of the old level</param>
            <param name="newLevel">The name of the new level</param>
        </member>
        <member name="M:ModdingAPI.Mod.LevelUnloaded(System.String,System.String)">
            <summary>
            Called when a scene is unloaded by the modding API
            </summary>
            <param name="oldLevel">The name of the old level</param>
            <param name="newLevel">The name of the new level</param>
        </member>
        <member name="M:ModdingAPI.Mod.RegisterCommand(ModdingAPI.ModCommand)">
            <summary>
            Registers a command to be used in the debug console for this mod
            </summary>
            <param name="command">The new command to be added</param>
        </member>
        <member name="M:ModdingAPI.Mod.IsModLoaded(System.String)">
            <summary>
            Checks whether a specific mod has been loaded or not
            </summary>
            <param name="modId">The unique id of the mod</param>
            <returns>Whether or not the mod has been loaded</returns>
        </member>
        <member name="M:ModdingAPI.Mod.Localize(System.String)">
            <summary>
            Localizes text based on a key into the game's current language
            </summary>
            <param name="key">The key of the text to localize</param>
            <returns>The localized text</returns>
        </member>
        <member name="M:ModdingAPI.Mod.Log(System.String)">
            <summary>
            Logs a message to the console and log file
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:ModdingAPI.Mod.LogWarning(System.String)">
            <summary>
            Logs a warning to the console and log file
            </summary>
            <param name="warning">The warning to display</param>
        </member>
        <member name="M:ModdingAPI.Mod.LogError(System.String)">
            <summary>
            Logs an error to the console and log file
            </summary>
            <param name="error">The error to display</param>
        </member>
        <member name="M:ModdingAPI.Mod.LogDisplay(System.String)">
            <summary>
            Displays a message with a UI text box
            </summary>
            <param name="message">The text to display</param>
        </member>
        <member name="T:ModdingAPI.ModCommand">
            <summary>
            A command that can be used in the console for this mod/>
            </summary>
        </member>
        <member name="P:ModdingAPI.ModCommand.CommandName">
            <summary>
            The prefix used to call this command
            </summary>
        </member>
        <member name="P:ModdingAPI.ModCommand.AllowUppercase">
            <summary>
            Whether to keep uppercase letters in the command or convert everything to lowercase
            </summary>
        </member>
        <member name="M:ModdingAPI.ModCommand.ValidateParameterList(System.String[],System.Int32)">
            <summary>
            Validates the number of parameters passed in and displays an error if incorrect
            </summary>
            <param name="parameters">The list of paramaters</param>
            <param name="amount">The correct amount of parameters</param>
            <returns>Whether the parameter list is valid or not"</returns>
        </member>
        <member name="M:ModdingAPI.ModCommand.ValidateIntParameter(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Parses a parameter into an integer and validates its value
            </summary>
            <param name="parameter">The parameter passed in</param>
            <param name="minValue">The minimum acceptable value</param>
            <param name="maxValue">The maxmimum acceptable value</param>
            <param name="result">The resulting integer</param>
            <returns>Whether the parameter is valid or not</returns>
        </member>
        <member name="M:ModdingAPI.ModCommand.ValidateFloatParameter(System.String,System.Single,System.Single,System.Single@)">
            <summary>
            Parses a parameter into a float and validates its value
            </summary>
            <param name="parameter">The parameter passed in</param>
            <param name="minValue">The minimum acceptable value</param>
            <param name="maxValue">The maxmimum acceptable value</param>
            <param name="result">The resulting float</param>
            <returns>Whether the parameter is valid or not</returns>
        </member>
        <member name="M:ModdingAPI.ModCommand.ValidateStringParameter(System.String,System.Int32,System.Int32)">
            <summary>
            Validates the length of a string parameter
            </summary>
            <param name="parameter">The parameter passed in</param>
            <param name="minLength">The minimum acceptable length</param>
            <param name="maxLength">The maxmimum acceptable length</param>
            <returns>Whether the parameter is valid or not</returns>
        </member>
        <member name="M:ModdingAPI.ModCommand.Write(System.String)">
            <summary>
            Writes a line of text to the console
            </summary>
            <param name="text">The text to write</param>
        </member>
        <member name="M:ModdingAPI.ModCommand.AddSubCommands">
            <summary>
            Initializes a mapping of command names to functionality
            </summary>
            <returns>The command mapping</returns>
        </member>
        <member name="T:ModdingAPI.ModPersistentData">
            <summary>
            A serializable class that contains persistent data related to this mod
            </summary>
        </member>
        <member name="M:ModdingAPI.ModPersistentData.#ctor(System.String)">
            <summary>
            Creates new persistent data for this mod
            </summary>
            <param name="persistentId">The same persistent id as the persistent mod</param>
        </member>
        <member name="T:ModdingAPI.PersistentMod">
            <summary>
            An abstract representation of a mod that can save and load game data
            </summary>
        </member>
        <member name="M:ModdingAPI.PersistentMod.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates, registers, and patches a new persistent mod
            </summary>
            <param name="modId">The unique id of this mod used for harmony patching</param>
            <param name="modName">The name of the mod to be displayed on the main menu</param>
            <param name="modVersion">The version of the mod</param>
        </member>
        <member name="M:ModdingAPI.PersistentMod.SaveGame">
            <summary>
            Called by the modding API whenever the game is saved
            </summary>
            <returns>The persistent data to save</returns>
        </member>
        <member name="M:ModdingAPI.PersistentMod.LoadGame(ModdingAPI.ModPersistentData)">
            <summary>
            Called by the modding API whenever the game is loaded
            </summary>
            <param name="data">The persistent data that was loaded</param>
        </member>
        <member name="M:ModdingAPI.PersistentMod.ResetGame">
            <summary>
            Called by the modding API whenever the game is reset
            </summary>
        </member>
        <member name="M:ModdingAPI.PersistentMod.NewGame">
            <summary>
            Called by the modding API whenever a new game is started
            </summary>
        </member>
        <member name="P:ModdingAPI.PersistentMod.PersistentID">
            <summary>
            The unique id of this persistent system
            </summary>
        </member>
    </members>
</doc>
